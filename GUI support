{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "1cdc08ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing necessary libraries for the application\n",
    "import tkinter as tk\n",
    "from tkinter import simpledialog, messagebox, Listbox, Scrollbar\n",
    "import pickle\n",
    "import os\n",
    "from datetime import datetime\n",
    "import re\n",
    "\n",
    "# Ticket class definition: Stores details of a ticket\n",
    "class Ticket:\n",
    "    def __init__(self, name, description, price, validity, discount, terms):\n",
    "        # Initialize ticket attributes\n",
    "        self.name = name\n",
    "        self.description = description\n",
    "        self.price = price\n",
    "        self.validity = validity\n",
    "        self.discount = discount\n",
    "        self.terms = terms\n",
    "        self.sold_count = 0  # Track number of tickets sold\n",
    "\n",
    "    def __str__(self):\n",
    "        # Define how to represent a ticket as a string\n",
    "        return f\"{self.name} - {self.price} AED (Sold: {self.sold_count})\"\n",
    "\n",
    "# User class definition: Stores user information and their purchase history\n",
    "class User:\n",
    "    def __init__(self, username, password, email, phone_number, dob):\n",
    "        # Initialize user attributes\n",
    "        self.username = username\n",
    "        self.password = password\n",
    "        self.email = email\n",
    "        self.phone_number = phone_number\n",
    "        self.dob = dob\n",
    "        self.purchase_history = []  # List to track the user's ticket purchases\n",
    "\n",
    "    def add_purchase(self, ticket):\n",
    "        # Add a purchased ticket to the user's purchase history\n",
    "        self.purchase_history.append(ticket)\n",
    "\n",
    "    def update_details(self, email=None, phone_number=None, dob=None):\n",
    "        # Update the user's details if provided\n",
    "        if email:\n",
    "            self.email = email\n",
    "        if phone_number:\n",
    "            self.phone_number = phone_number\n",
    "        if dob:\n",
    "            self.dob = dob\n",
    "\n",
    "# Main class for managing the ticket booking system\n",
    "class TicketBookingSystem:\n",
    "    def __init__(self):\n",
    "        # Initialize file names and load users and tickets data\n",
    "        self.users_file = \"users.pkl\"  \n",
    "        self.tickets_file = \"tickets.pkl\" \n",
    "        self.users = self.load_users()  # Load existing users from file\n",
    "        self.tickets = self.load_tickets()  # Load existing tickets from file\n",
    "\n",
    "    # Load user data from the file if it exists\n",
    "    def load_users(self):\n",
    "        if os.path.exists(self.users_file):\n",
    "            with open(self.users_file, \"rb\") as file:\n",
    "                return pickle.load(file)\n",
    "        return {}  # Return an empty dictionary if no user data exists\n",
    "\n",
    "    # Save user data to the file\n",
    "    def save_users(self):\n",
    "        with open(self.users_file, \"wb\") as file:\n",
    "            pickle.dump(self.users, file)\n",
    "\n",
    "    # Load ticket data from the file if it exists\n",
    "    def load_tickets(self):\n",
    "        if os.path.exists(self.tickets_file):\n",
    "            with open(self.tickets_file, \"rb\") as file:\n",
    "                return pickle.load(file)\n",
    "        # Default set of tickets if no file exists\n",
    "        return [\n",
    "            Ticket(\"Single Day Pass\", \"Access to the park for one day\", 275, \"1 day\", \"None\", \"Valid only on selected date\"),\n",
    "            Ticket(\"Two-Day Pass\", \"Access to the park for two consecutive days\", 480, \"2 days\", \"10% discount for online purchase\", \"Cannot be split over multiple trips\"),\n",
    "            Ticket(\"Annual Membership\", \"Unlimited access for one year\", 1840, \"1 year\", \"15% discount on renewal\", \"Must be used by the same person\"),\n",
    "            Ticket(\"Child Ticket\", \"Discounted ticket for children (ages 3-12)\", 185, \"1 day\", \"None\", \"Valid only on selected date, must be accompanied by an adult\"),\n",
    "            Ticket(\"Group Ticket (10+)\", \"Special rate for groups of 10 or more\", 220, \"1 day\", \"20% off for groups of 20 or more\", \"Must be booked in advance\"),\n",
    "            Ticket(\"VIP Experience Pass\", \"Includes expedited access and reserved seating for shows\", 550, \"1 day\", \"None\", \"Limited availability, must be purchased in advance\")\n",
    "        ]\n",
    "\n",
    "    # Save ticket data to the file\n",
    "    def save_tickets(self):\n",
    "        with open(self.tickets_file, \"wb\") as file:\n",
    "            pickle.dump(self.tickets, file)\n",
    "\n",
    "    # Register a new user if the username does not already exist\n",
    "    def register_user(self, username, password, email, phone_number, dob):\n",
    "        if username in self.users:\n",
    "            return False  # Return False if the username is already taken\n",
    "        user = User(username, password, email, phone_number, dob)  # Create a new user\n",
    "        self.users[username] = user  # Store the user in the dictionary\n",
    "        self.save_users()  # Save users to file\n",
    "        return True  # Return True indicating successful registration\n",
    "\n",
    "    # Login a user by validating the username and password\n",
    "    def login_user(self, username, password):\n",
    "        user = self.users.get(username)  # Retrieve user by username\n",
    "        if user and user.password == password:\n",
    "            return user  # Return the user object if login is successful\n",
    "        return None  # Return None if the login fails\n",
    "\n",
    "    # Add a purchased ticket to the user's purchase history\n",
    "    def add_purchase_to_user(self, username, ticket):\n",
    "        user = self.users.get(username)  # Retrieve the user by username\n",
    "        if user:\n",
    "            user.add_purchase(ticket)  # Add the ticket to the user's history\n",
    "            self.save_users()  # Save the updated user data to file\n",
    "\n",
    "    # Modify the user's details (email, phone number, date of birth)\n",
    "    def modify_user_details(self, username, email=None, phone_number=None, dob=None):\n",
    "        user = self.users.get(username)  # Retrieve the user by username\n",
    "        if user:\n",
    "            user.update_details(email, phone_number, dob)  # Update the user's details\n",
    "            self.save_users()  \n",
    "            return True \n",
    "        return False  \n",
    "    \n",
    "    # Purchase a ticket by the user, applying relevant discounts\n",
    "    def purchase_ticket(self, username, ticket_choice, num_persons=None, visit_date=None, payment_method=None):\n",
    "        ticket = self.tickets[ticket_choice]  # Get the selected ticket\n",
    "        discount = 0  # Initialize discount variable\n",
    "\n",
    "        # Apply discounts based on ticket type\n",
    "        if ticket.name == \"Single Day Pass\":\n",
    "            discount = 0  \n",
    "        elif ticket.name == \"Two-Day Pass\":\n",
    "            discount = 0.10  \n",
    "        elif ticket.name == \"Annual Membership\":\n",
    "            discount = 0.15  \n",
    "        elif ticket.name == \"Child Ticket\":\n",
    "            discount = 0  \n",
    "        elif ticket.name == \"Group Ticket (10+)\":\n",
    "            # Ensure that group size is a valid integer\n",
    "            if not isinstance(num_persons, int) or num_persons < 1:\n",
    "                raise ValueError(\"Group size must be a positive integer.\")\n",
    "            total_price = ticket.price * num_persons  # Calculate total price for group\n",
    "            if num_persons > 10:\n",
    "                discount = 0.20  # 20% discount for groups larger than 10\n",
    "            final_price = total_price * (1 - discount)  # Calculate final price with discount\n",
    "            ticket_record = f\"{ticket.name} ({num_persons} people) - ${final_price:.2f} AED (Discount Applied: {int(discount * 100)}%)\"\n",
    "            self.add_purchase_to_user(username, ticket_record)  # Add purchase record to the user\n",
    "            ticket.sold_count += num_persons  # Update ticket's sold count\n",
    "            return final_price, ticket_record  # Return final price and ticket record\n",
    "\n",
    "        # Standard pricing for single ticket purchase\n",
    "        final_price = ticket.price * (1 - discount)  # Calculate final price after discount\n",
    "        ticket_record = f\"{ticket.name} - ${final_price:.2f} AED (Discount Applied: {int(discount * 100)}%)\"\n",
    "        self.add_purchase_to_user(username, ticket_record)  # Add purchase record to the user\n",
    "        \n",
    "        ticket.sold_count += 1  # Increment sold count by 1 for each ticket purchased\n",
    "        return final_price, ticket_record  # Return final price and ticket record\n",
    " \n",
    "# Main application class, inherits from Tkinter's Tk class\n",
    "class Application(tk.Tk):\n",
    "    def __init__(self, system):\n",
    "        # Initialize the main application window\n",
    "        super().__init__()\n",
    "        self.system = system  # The ticket booking system instance\n",
    "        self.title(\"Menu\")  # Set the window title\n",
    "        self.geometry(\"700x500\")  # Set window size\n",
    "        self.resizable(False, False)  # Disable window resizing\n",
    "        self.config(bg=\"#5B7C99\")  # Set the background color\n",
    "\n",
    "        # Create and pack the welcome message label\n",
    "        self.welcome_label = tk.Label(self, text=\"Welcome to Adventure Land\", font=('Arial', 18, 'bold'), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.welcome_label.pack(pady=30)  # Add some padding above the button\n",
    "\n",
    "        # Create and pack the 'Register' button with rounded edges\n",
    "        self.register_button = tk.Button(self, text=\"Create Account\", width=25, height=3, font=('Arial', 12), command=self.open_register, \n",
    "                                         relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.register_button.pack(pady=20)\n",
    "\n",
    "        # Create and pack the 'Login' button\n",
    "        self.login_button = tk.Button(self, text=\"Login\", width=25, height=3, font=('Arial', 12), command=self.open_login,\n",
    "                              relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.login_button.pack(pady=20)\n",
    "\n",
    "        # Create and pack the 'Admin' button\n",
    "        self.admin_button = tk.Button(self, text=\"Admin\", width=25, height=3, font=('Arial', 12), command=self.open_admin,\n",
    "                               relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.admin_button.pack(pady=20)\n",
    "\n",
    "        # Create and pack the 'Exit' button\n",
    "        self.exit_button = tk.Button(self, text=\"Exit\", width=25, height=3, font=('Arial', 12), command=self.quit,\n",
    "                               relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.exit_button.pack(pady=20)\n",
    "\n",
    "    # Method to open the registration window\n",
    "    def open_register(self):\n",
    "        RegisterWindow(self, self.system)\n",
    "\n",
    "    # Method to open the login window\n",
    "    def open_login(self):\n",
    "        LoginWindow(self, self.system)\n",
    "\n",
    "    # Method to open the admin window\n",
    "    def open_admin(self):\n",
    "        AdminWindow(self, self.system)\n",
    "\n",
    "# Registration window class, inherits from Toplevel for creating a new window\n",
    "class RegisterWindow(tk.Toplevel):\n",
    "    def __init__(self, parent, system):\n",
    "        # Initialize the registration window\n",
    "        super().__init__(parent)\n",
    "        self.system = system  # The ticket booking system instance\n",
    "        self.title(\"Register\")  # Set the window title\n",
    "        self.geometry(\"700x500\")  # Set window size\n",
    "        self.config(bg=\"#5B7C99\")  # Set the background color\n",
    "        \n",
    "        # Create and pack the input fields for registration details\n",
    "        \n",
    "        self.welcome_label = tk.Label(self, text=\"Create An Account\", font=('Arial', 14, 'bold'), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.welcome_label.pack(pady=30)\n",
    "\n",
    "        self.username_label = tk.Label(self, text=\"Username\", font=('Arial', 12),bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.username_label.pack(pady=10)\n",
    "        self.username_entry = tk.Entry(self, font=('Arial', 14), width=25)\n",
    "        self.username_entry.pack(pady=10)\n",
    "\n",
    "        self.password_label = tk.Label(self, text=\"Password\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.password_label.pack(pady=10)\n",
    "        self.password_entry = tk.Entry(self, font=('Arial', 14), show=\"*\", width=25)\n",
    "        self.password_entry.pack(pady=10)\n",
    "\n",
    "        self.dob_label = tk.Label(self, text=\"DOB (YYYY-MM-DD)\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.dob_label.pack(pady=10)\n",
    "        self.dob_entry = tk.Entry(self, font=('Arial', 14), width=25)\n",
    "        self.dob_entry.pack(pady=10)\n",
    "\n",
    "        self.email_label = tk.Label(self, text=\"Email\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.email_label.pack(pady=10)\n",
    "        self.email_entry = tk.Entry(self, font=('Arial', 14), width=25)\n",
    "        self.email_entry.pack(pady=10)\n",
    "\n",
    "        self.phone_label = tk.Label(self, text=\"Phone Number\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.phone_label.pack(pady=10)\n",
    "        self.phone_entry = tk.Entry(self, font=('Arial', 14), width=25)\n",
    "        self.phone_entry.pack(pady=10)\n",
    "\n",
    "       \n",
    "        # Register button to submit registration details\n",
    "        self.register_button = tk.Button(self, text=\"Create\", font=('Arial', 12), width=25, height=3, command=self.register)\n",
    "        self.register_button.pack(pady=20)\n",
    "\n",
    "    # Method to handle user registration\n",
    "    def register(self):\n",
    "        # Get the data from the input fields\n",
    "        username = self.username_entry.get().strip()\n",
    "        password = self.password_entry.get().strip()\n",
    "        email = self.email_entry.get().strip()\n",
    "        phone_number = self.phone_entry.get().strip()\n",
    "        dob = self.dob_entry.get().strip()\n",
    "\n",
    "        # Check if all fields are filled\n",
    "        if not username or not password or not email or not phone_number or not dob:\n",
    "            messagebox.showerror(\"Input Error\", \"All fields are required!\")\n",
    "            return\n",
    "\n",
    "        # Validate email format\n",
    "        if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n",
    "            messagebox.showerror(\"Input Error\", \"Invalid email format!\")\n",
    "            return\n",
    "\n",
    "        # Validate phone number format (basic format validation)\n",
    "        if not re.match(r\"^\\+?1?\\d{9,15}$\", phone_number):\n",
    "            messagebox.showerror(\"Input Error\", \"Invalid phone number format!\")\n",
    "            return\n",
    "\n",
    "        # Validate date of birth format (YYYY-MM-DD)\n",
    "        try:\n",
    "            datetime.strptime(dob, \"%Y-%m-%d\")\n",
    "        except ValueError:\n",
    "            messagebox.showerror(\"Input Error\", \"Invalid date of birth format. Use YYYY-MM-DD.\")\n",
    "            return\n",
    "\n",
    "        # Proceed with registration if all inputs are valid\n",
    "        if self.system.register_user(username, password, email, phone_number, dob):\n",
    "            messagebox.showinfo(\"Success\", \"Account created successful!\")\n",
    "            self.destroy()  # Close the registration window\n",
    "        else:\n",
    "            messagebox.showerror(\"Error\", \"Username already exists!\")  # Show error if username is taken\n",
    "\n",
    "# Login window class, inherits from Toplevel for creating a new window\n",
    "class LoginWindow(tk.Toplevel):\n",
    "    def __init__(self, parent, system):\n",
    "        # Initialize the login window\n",
    "        super().__init__(parent)\n",
    "        self.system = system  # The ticket booking system instance\n",
    "        self.title(\"Login\")  # Set the window title\n",
    "        self.geometry(\"700x600\")  # Set window size\n",
    "        self.config(bg=\"#5B7C99\")  # Set the background color\n",
    "\n",
    "        # Create and pack the input fields for login details\n",
    "        \n",
    "        self.welcome_label = tk.Label(self, text=\"LogIn\", font=('Arial', 18, 'bold'), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.welcome_label.pack(pady=30)\n",
    "\n",
    "        self.username_label = tk.Label(self, text=\"Username\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.username_label.pack(pady=10)\n",
    "        self.username_entry = tk.Entry(self, font=('Arial', 14), width=25)\n",
    "        self.username_entry.pack(pady=10)\n",
    "\n",
    "        self.password_label = tk.Label(self, text=\"Password\", font=('Arial', 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.password_label.pack(pady=10)\n",
    "        self.password_entry = tk.Entry(self, font=('Arial', 14), show=\"*\", width=25)\n",
    "        self.password_entry.pack(pady=10)\n",
    "\n",
    "        # Login button to submit login details\n",
    "        self.login_button = tk.Button(self, text=\"Login\", font=('Arial', 12), width=25, height=3, command=self.login)\n",
    "        self.login_button.pack(pady=20)\n",
    "\n",
    "    # Method to handle user login\n",
    "    def login(self):\n",
    "        # Get the data from the input fields\n",
    "        username = self.username_entry.get().strip()\n",
    "        password = self.password_entry.get().strip()\n",
    "\n",
    "        # Check if both fields are filled\n",
    "        if not username or not password:\n",
    "            messagebox.showerror(\"Input Error\", \"Both fields are required!\")\n",
    "            return\n",
    "        \n",
    "        # Attempt to login the user with the provided credentials\n",
    "        user = self.system.login_user(username, password)\n",
    "        if user:\n",
    "            messagebox.showinfo(\"Success\", \"Login successful!\")  # Show success message\n",
    "            self.destroy()  # Close the login window\n",
    "            UserMenu(self.master, user, self.system)  # Open the user menu\n",
    "        else:\n",
    "            messagebox.showerror(\"Error\", \"Invalid credentials!\")  # Show error if login fails\n",
    "\n",
    "# UserMenu class represents the main interface for the regular user\n",
    "class UserMenu(tk.Toplevel):\n",
    "    def __init__(self, parent, user, system):\n",
    "        super().__init__(parent)\n",
    "        self.user = user  # Store the user object\n",
    "        self.system = system  # Store the system object\n",
    "        self.title(f\"Welcome {user.username}\")  # Set the window title with the username\n",
    "        self.geometry(\"700x700\")  # Set window size\n",
    "        self.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "        # Create a button for purchasing a ticket\n",
    "        self.welcome_label = tk.Label(self, text=\"User Menu\", font=('Arial', 14, 'bold'), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.welcome_label.pack(pady=30)\n",
    "        \n",
    "        \n",
    "        self.purchase_button  = tk.Button(self, text=\"Purchase Ticket\", width=25, height=3, font=('Arial', 12), command=self.purchase_ticket, \n",
    "                                         relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.purchase_button.pack(pady=20)\n",
    "\n",
    "        # Create a button to view purchase history\n",
    "        \n",
    "        self.history_button = tk.Button(self, text=\"View Purchase History\", width=25, height=3, font=('Arial', 12), command=self.view_history, \n",
    "                                         relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.history_button.pack(pady=20)\n",
    "\n",
    "\n",
    "        # Create a button for account management        \n",
    "        self.account_button = tk.Button(self, text=\"Account Management\", width=25, height=3, font=('Arial', 12), command=self.account_management, \n",
    "                                         relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.account_button.pack(pady=20)\n",
    "\n",
    "\n",
    "        # Create an exit button to close the window\n",
    "        self.exit_button = tk.Button(self, text=\"Exit\", width=25, height=3, font=('Arial', 12), command=self.quit, \n",
    "                                         relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.exit_button.pack(pady=20)\n",
    "        \n",
    "        \n",
    "    # Function to open the ticket purchase window\n",
    "    def purchase_ticket(self):\n",
    "        purchase_window = tk.Toplevel(self)\n",
    "        purchase_window.title(\"Select a Ticket\")\n",
    "        purchase_window.geometry(\"600x400\")  # Set window size\n",
    "        purchase_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "        \n",
    "\n",
    "        # Label for available tickets\n",
    "        tk.Label(purchase_window, text=\"Available Tickets\", font=(\"Arial\", 16, \"bold\"), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "\n",
    "        # Listbox to display the available tickets\n",
    "        ticket_listbox = Listbox(purchase_window, font=(\"Arial\", 12), bg=\"#5B7C99\", fg=\"black\", width=50, height=10)\n",
    "        ticket_listbox.pack(pady=20)\n",
    "\n",
    "        # Insert available tickets into the listbox\n",
    "        for idx, ticket in enumerate(self.system.tickets):\n",
    "            ticket_listbox.insert(tk.END, f\"{ticket.name} - {ticket.price} AED\")\n",
    "\n",
    "        # Function to handle ticket selection from the listbox\n",
    "        def on_select_ticket(event):\n",
    "            selected_idx = ticket_listbox.curselection()[0]  # Get the selected ticket index\n",
    "            ticket = self.system.tickets[selected_idx]  # Retrieve the ticket object\n",
    "            # Ask the user for the visit date\n",
    "            visit_date = simpledialog.askstring(\"Visit Date\", \"Enter your visit date (YYYY-MM-DD):\")\n",
    "            if not visit_date:\n",
    "                return  # Exit if no date is provided\n",
    "            # Ask for the payment method\n",
    "            payment_method = simpledialog.askstring(\"Payment Method\", \"Enter Payment Method (e.g., Credit/Debit Card):\")\n",
    "            if not payment_method:\n",
    "                return  # Exit if no payment method is provided\n",
    "            # Ask for the number of persons\n",
    "            num_persons = simpledialog.askinteger(\"Group Size\", \"Enter the number of persons:\", minvalue=1)\n",
    "            if num_persons:\n",
    "                # If group size is specified, purchase the ticket for the group\n",
    "                price, ticket_details = self.system.purchase_ticket(self.user.username, selected_idx, num_persons, visit_date, payment_method)\n",
    "                messagebox.showinfo(\"Ticket Purchase\", f\"Ticket Purchased: {ticket_details}\\nTotal: ${price:.2f}\")\n",
    "            else:\n",
    "                # If no group size is provided, purchase for a single person\n",
    "                price, ticket_details = self.system.purchase_ticket(self.user.username, selected_idx, visit_date=visit_date, payment_method=payment_method)\n",
    "                messagebox.showinfo(\"Ticket Purchase\", f\"Ticket Purchased: {ticket_details}\\nTotal: ${price:.2f}\")\n",
    "\n",
    "        # Bind the double-click event to select a ticket\n",
    "        ticket_listbox.bind(\"<Double-1>\", on_select_ticket)\n",
    "\n",
    "    # Function to view purchase history\n",
    "    def view_history(self):\n",
    "        history_window = tk.Toplevel(self)\n",
    "        history_window.title(\"Purchase History\")\n",
    "        history_window.geometry(\"600x400\")\n",
    "        history_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "        \n",
    "\n",
    "        tk.Label(history_window, text=\"Purchase History\", font=(\"Arial\", 16, \"bold\"), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "\n",
    "        # Listbox to display the user's purchase history\n",
    "        history_listbox = Listbox(history_window, font=(\"Arial\", 12), bg=\"#5B7C99\", fg=\"black\", width=50, height=10)\n",
    "        history_listbox.pack(pady=20)\n",
    "\n",
    "        # Populate the listbox with purchase history data\n",
    "        for history_item in self.user.purchase_history:\n",
    "            history_listbox.insert(tk.END, history_item)\n",
    "\n",
    "    # Function to manage user account details\n",
    "    def account_management(self):\n",
    "        account_window = tk.Toplevel(self)\n",
    "        account_window.title(\"Account Management\")\n",
    "        account_window.geometry(\"500x500\")\n",
    "        account_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "        \n",
    "        \n",
    "        # Display account details\n",
    "        tk.Label(account_window, text=\"Account Details\", font=(\"Arial\", 18, \"bold\"), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "        tk.Label(account_window, text=f\"Username: {self.user.username}\", font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "        tk.Label(account_window, text=f\"Email: {self.user.email}\", font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "        tk.Label(account_window, text=f\"Phone Number: {self.user.phone_number}\", font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "        tk.Label(account_window, text=f\"Date of Birth: {self.user.dob}\", font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "\n",
    "        # Button to modify user details\n",
    "        modify_button = tk.Button(account_window, text=\"Modify?\", font=(\"Arial\", 14), command=lambda: self.modify_details(account_window))\n",
    "        modify_button.pack(pady=20)\n",
    "\n",
    "    # Function to modify user account details\n",
    "    def modify_details(self, account_window):\n",
    "        modify_window = tk.Toplevel(account_window)\n",
    "        modify_window.title(\"Modify Account Details\")\n",
    "        modify_window.geometry(\"400x400\")\n",
    "        modify_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "        \n",
    "        # Entry fields for new account details\n",
    "        email_label = tk.Label(modify_window, text=\"New Email:\", font=(\"Arial\", 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        email_label.pack(pady=10)\n",
    "        email_entry = tk.Entry(modify_window, font=(\"Arial\", 14), width=25)\n",
    "        email_entry.pack(pady=10)\n",
    "\n",
    "        phone_label = tk.Label(modify_window, text=\"New Phone Number:\", font=(\"Arial\", 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        phone_label.pack(pady=10)\n",
    "        phone_entry = tk.Entry(modify_window, font=(\"Arial\", 14), width=25)\n",
    "        phone_entry.pack(pady=10)\n",
    "\n",
    "        dob_label = tk.Label(modify_window, text=\"New DOB (YYYY-MM-DD):\", font=(\"Arial\", 12), bg=\"#5B7C99\", fg=\"black\")\n",
    "        dob_label.pack(pady=10)\n",
    "        dob_entry = tk.Entry(modify_window, font=(\"Arial\", 14), width=25)\n",
    "        dob_entry.pack(pady=10)\n",
    "\n",
    "        # Function to save modified details\n",
    "        def save_changes():\n",
    "            new_email = email_entry.get().strip()\n",
    "            new_phone = phone_entry.get().strip()\n",
    "            new_dob = dob_entry.get().strip()\n",
    "\n",
    "            # Update the system with new details\n",
    "            if self.system.modify_user_details(self.user.username, new_email, new_phone, new_dob):\n",
    "                messagebox.showinfo(\"Success\", \"Details updated successfully!\")\n",
    "                self.user.email = new_email\n",
    "                self.user.phone_number = new_phone\n",
    "                self.user.dob = new_dob\n",
    "                modify_window.destroy()\n",
    "            else:\n",
    "                messagebox.showerror(\"Error\", \"Failed to update details!\")\n",
    "\n",
    "        # Button to save the changes\n",
    "        save_button = tk.Button(modify_window, text=\"Save Changes\", font=(\"Arial\", 14), command=save_changes)\n",
    "        save_button.pack(pady=20)\n",
    "\n",
    "# AdminWindow class represents the admin interface\n",
    "class AdminWindow(tk.Toplevel):\n",
    "    def __init__(self, parent, system):\n",
    "        super().__init__(parent)\n",
    "        self.system = system  # Store the system object\n",
    "        self.title(\"Admin Menu\")\n",
    "        self.geometry(\"800x600\")  # Set window size\n",
    "        self.resizable(True, True)  # Allow resizing\n",
    "        self.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "        \n",
    "        self.welcome_label = tk.Label(self, text=\"Admin Menu\", font=('Arial', 18, 'bold'), bg=\"#5B7C99\", fg=\"black\")\n",
    "        self.welcome_label.pack(pady=30)\n",
    "        \n",
    "        \n",
    "        # Button for user management\n",
    "        self.user_management_button = tk.Button(self, text=\"User Management\", width=25, height=3, font=('Arial', 12), \n",
    "                                         command=self.user_management, relief=\"solid\", borderwidth=2, \n",
    "                                         highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.user_management_button.pack(pady=20)\n",
    "\n",
    "        # Button for ticket updation\n",
    "        self.ticket_update_button = tk.Button(self, text=\"Ticket Updation\", width=25, height=3, font=('Arial', 12), \n",
    "                                      command=self.ticket_updation, relief=\"solid\", borderwidth=2, \n",
    "                                      highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.ticket_update_button.pack(pady=20)\n",
    "\n",
    "        # Button to view total tickets sold\n",
    "        self.total_tickets_button = tk.Button(self, text=\"Total Tickets Sold\", width=25, height=3, font=('Arial', 12), \n",
    "                                      command=self.total_tickets_sold, relief=\"solid\", borderwidth=2, \n",
    "                                      highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.total_tickets_button.pack(pady=20)\n",
    "\n",
    "        # Button to exit the admin window\n",
    "        self.exit_button = tk.Button(self, text=\"Exit\", width=25, height=3, font=('Arial', 12), command=self.quit, \n",
    "                             relief=\"solid\", borderwidth=2, highlightbackground=\"white\", highlightcolor=\"white\")\n",
    "        self.exit_button.pack(pady=20)\n",
    "\n",
    "\n",
    "    # Function to manage users\n",
    "    def user_management(self):\n",
    "        user_management_window = tk.Toplevel(self)\n",
    "        user_management_window.title(\"User Management\")\n",
    "        user_management_window.geometry(\"600x400\")  # Larger window for user management\n",
    "        user_management_window.resizable(True, True)\n",
    "        user_management_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "        \n",
    "        \n",
    "\n",
    "        # Scrollbar and listbox to show users\n",
    "        scrollbar = Scrollbar(user_management_window)\n",
    "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "\n",
    "        user_listbox = Listbox(user_management_window, font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\", width=50, height=15, yscrollcommand=scrollbar.set)\n",
    "        user_listbox.pack(pady=20)\n",
    "\n",
    "        # Insert users into the listbox\n",
    "        for username in self.system.users.keys():\n",
    "            user_listbox.insert(tk.END, username)\n",
    "\n",
    "        # Link the scrollbar to the listbox\n",
    "        scrollbar.config(command=user_listbox.yview)\n",
    "\n",
    "        # Function to delete a selected user\n",
    "        def delete_user():\n",
    "            selected_user = user_listbox.get(tk.ACTIVE)  # Get the selected user\n",
    "            if selected_user:\n",
    "                confirm_delete = messagebox.askyesno(\"Confirm Deletion\", f\"Are you sure you want to delete user: {selected_user}?\")\n",
    "                if confirm_delete:\n",
    "                    del self.system.users[selected_user]  # Delete user from the system\n",
    "                    self.system.save_users()  # Save the updated user list\n",
    "                    user_listbox.delete(user_listbox.curselection())  # Remove the user from the listbox\n",
    "                    messagebox.showinfo(\"Success\", \"User deleted successfully!\")\n",
    "            else:\n",
    "                messagebox.showerror(\"Error\", \"No user selected!\")\n",
    "\n",
    "        # Button to delete a user\n",
    "        delete_button = tk.Button(user_management_window, text=\"Delete User\", font=(\"Arial\", 14), width=20, height=2, command=delete_user)\n",
    "        delete_button.pack(pady=20)\n",
    "\n",
    "        # Button to close the user management window\n",
    "        close_button = tk.Button(user_management_window, text=\"Close\", font=(\"Arial\", 14), width=20, height=2, command=user_management_window.destroy)\n",
    "        close_button.pack(pady=10)\n",
    "\n",
    "    # Function for ticket updation\n",
    "    def ticket_updation(self):\n",
    "        ticket_updation_window = tk.Toplevel(self)\n",
    "        ticket_updation_window.title(\"Ticket Updation\")\n",
    "        ticket_updation_window.geometry(\"600x500\")  # Larger window for ticket updation\n",
    "        ticket_updation_window.resizable(True, True)\n",
    "        ticket_updation_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "        tk.Label(ticket_updation_window, text=\"Available Tickets\", font=(\"Arial\", 16, \"bold\"), bg=\"#5B7C99\", fg=\"black\").pack(pady=10)\n",
    "\n",
    "        # Scrollbar and listbox to display available tickets\n",
    "        scrollbar = Scrollbar(ticket_updation_window)\n",
    "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "\n",
    "        ticket_listbox = Listbox(ticket_updation_window, font=(\"Arial\", 14), bg=\"#5B7C99\", fg=\"black\", width=50, height=15, yscrollcommand=scrollbar.set)\n",
    "        ticket_listbox.pack(pady=20)\n",
    "\n",
    "        for ticket in self.system.tickets:\n",
    "            ticket_listbox.insert(tk.END, f\"{ticket.name} - {ticket.price} AED\")\n",
    "\n",
    "        scrollbar.config(command=ticket_listbox.yview)\n",
    "\n",
    "        # Frame to input new price for the ticket\n",
    "        input_frame = tk.Frame(ticket_updation_window)\n",
    "        input_frame.pack(pady=10)\n",
    "\n",
    "        tk.Label(input_frame, text=\"New Price:\", font=(\"Arial\", 14),  bg=\"#5B7C99\", fg=\"black\").grid(row=0, column=0, padx=5, pady=5)\n",
    "        price_entry = tk.Entry(input_frame, font=(\"Arial\", 14), width=15)\n",
    "        price_entry.grid(row=0, column=1, padx=5, pady=5)\n",
    "\n",
    "        # Function to update the ticket price\n",
    "        def update_ticket():\n",
    "            selected = ticket_listbox.curselection()  # Get selected ticket\n",
    "            if not selected:\n",
    "                messagebox.showerror(\"Error\", \"No ticket selected!\")\n",
    "                return\n",
    "\n",
    "            ticket_name = ticket_listbox.get(selected[0]).split(\" - \")[0]  # Extract ticket name\n",
    "            ticket = next((t for t in self.system.tickets if t.name == ticket_name), None)\n",
    "            if not ticket:\n",
    "                messagebox.showerror(\"Error\", \"Ticket not found!\")\n",
    "                return\n",
    "\n",
    "            try:\n",
    "                # Get the new price from the entry field\n",
    "                new_price = float(price_entry.get().strip())\n",
    "                if new_price <= 0:\n",
    "                    raise ValueError(\"Price must be positive!\")\n",
    "            except ValueError:\n",
    "                messagebox.showerror(\"Error\", \"Invalid price entered!\")\n",
    "                return\n",
    "\n",
    "            ticket.price = new_price  # Update ticket price\n",
    "            self.system.save_tickets()  # Save the updated ticket list\n",
    "            ticket_listbox.delete(selected[0])  # Remove the old ticket entry\n",
    "            ticket_listbox.insert(selected[0], f\"{ticket.name} - {new_price} AED\")  # Add updated ticket\n",
    "            messagebox.showinfo(\"Success\", f\"{ticket.name} updated successfully!\")\n",
    "\n",
    "        # Button to update the selected ticket\n",
    "        tk.Button(ticket_updation_window, text=\"Update Ticket\", font=(\"Arial\", 14), command=update_ticket).pack(pady=10)\n",
    "\n",
    "        # Button to close the ticket updation window\n",
    "        tk.Button(ticket_updation_window, text=\"Close\", font=(\"Arial\", 14), command=ticket_updation_window.destroy).pack(pady=10)\n",
    "\n",
    "    # Function to view total tickets sold\n",
    "    def total_tickets_sold(self):\n",
    "        total_window = tk.Toplevel(self)\n",
    "        total_window.title(\"Total Tickets Sold\")\n",
    "        total_window.geometry(\"500x400\")\n",
    "        total_window.config(bg=\"#5B7C99\")  # Set background color\n",
    "\n",
    "\n",
    "        # Label for total tickets sold title\n",
    "        tk.Label(total_window, text=\"Total Tickets Sold\", font=(\"Arial\", 16, \"bold\"),  bg=\"#5B7C99\", fg=\"black\" ).pack(pady=10)\n",
    "\n",
    "        # Listbox to show ticket sales data\n",
    "        listbox = Listbox(total_window, font=(\"Arial\", 12),  bg=\"#5B7C99\", fg=\"black\", width=50, height=10)\n",
    "        listbox.pack(pady=20)\n",
    "\n",
    "        # Populate the listbox with sales data\n",
    "        for ticket in self.system.tickets:\n",
    "            listbox.insert(tk.END, f\"{ticket.name} - Sold: {ticket.sold_count} tickets\")\n",
    "\n",
    "        # Close button to exit the window\n",
    "        close_button = tk.Button(total_window, text=\"Close\", font=(\"Arial\", 12), width=20, height=2, command=total_window.destroy)\n",
    "        close_button.pack(pady=10)\n",
    "\n",
    "# Main application code \n",
    "if __name__ == \"__main__\":\n",
    "    system = TicketBookingSystem()  # Initialize the ticket booking system\n",
    "    app = Application(system)  \n",
    "    app.mainloop()  # Start the main event loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0105817",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc804766",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
